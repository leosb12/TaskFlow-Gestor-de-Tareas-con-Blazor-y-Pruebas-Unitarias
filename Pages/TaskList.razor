@page "/tareas"
@inject TaskFlow.Services.TareaService TareaService
@inject AuthStateService Auth
@inject NavigationManager Navigation
@using TaskFlow.Models

<div style="min-height: 100vh; background-color: #0d1117; color: white; padding: 2rem 1rem;">
    @if (!Auth.EstaLogueado)
    {
        <div style="background-color: #21262d; padding: 1rem; border-radius: 12px; color: #f85149;">
            ⚠️ Debes iniciar sesión para ver tus tareas.
        </div>
    }
    else
    {
        <h2 class="text-center mb-4" style="color: #58a6ff;">📝 Mis Tareas</h2>
        <p class="text-center mb-4">Bienvenido, <strong>@Auth.UsuarioActual.Nombre</strong></p>

        <div class="mb-4 d-flex flex-column flex-md-row justify-content-center align-items-stretch gap-2" style="max-width: 600px; margin: auto;">
            <input class="form-control"
                   style="background-color: #0d1117; border: 1px solid #30363d; color: white;"
                   placeholder="Nueva tarea"
                   @bind="nuevaTarea.Titulo" />

            <button class="btn" style="background-color: #238636; color: white; font-weight: bold;" @onclick="CrearTarea">
                ➕ Agregar
            </button>
        </div>

        @if (tareas.Count == 0)
        {
            <div class="text-center" style="color: #8b949e;">No hay tareas registradas.</div>
        }
        else
        {
            <ul class="list-group" style="max-width: 600px; margin: auto;">
                @foreach (var tarea in tareas)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center"
                        style="background-color: #161b22; border: 1px solid #30363d; color: white;">
                        <div class="d-flex align-items-center">
                            <input type="checkbox"
                                   class="form-check-input me-2"
                                   checked="@tarea.Completada"
                                   @onchange="(e) => CambiarEstadoTarea(tarea, (bool)e.Value)" />

                            <span style="@(tarea.Completada ? "text-decoration: line-through; color: #8b949e;" : "")">
                                @tarea.Titulo
                            </span>
                        </div>
                        <button class="btn btn-sm" style="background-color: #da3633; color: white;" @onclick="() => EliminarTarea(tarea.Id)">
                            🗑️
                        </button>
                    </li>
                }
            </ul>
        }
    }
</div>

@code {
    private List<Tarea> tareas = new();
    private Tarea nuevaTarea = new();

    protected override async Task OnInitializedAsync()
    {
        if (!Auth.EstaLogueado)
        {
            Navigation.NavigateTo("/login", true);
            return;
        }

        tareas = await TareaService.ObtenerTareasAsync();
    }

    private async Task CrearTarea()
    {
        if (!string.IsNullOrWhiteSpace(nuevaTarea.Titulo))
        {
            nuevaTarea.UsuarioId = Auth.UsuarioActual?.Id ?? 0;
            await TareaService.CrearTareaAsync(nuevaTarea);
            nuevaTarea = new();
            tareas = await TareaService.ObtenerTareasAsync();
        }
    }

    private async Task CambiarEstadoTarea(Tarea tarea, bool nuevoEstado)
    {
        tarea.Completada = nuevoEstado;
        await TareaService.ActualizarTareaAsync(tarea);
        tareas = await TareaService.ObtenerTareasAsync();
    }

    private async Task EliminarTarea(int id)
    {
        await TareaService.EliminarTareaAsync(id);
        tareas = await TareaService.ObtenerTareasAsync();
    }
}
